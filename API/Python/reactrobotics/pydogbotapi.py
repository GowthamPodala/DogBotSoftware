# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pydogbotapi', [dirname(__file__)])
        except ImportError:
            import _pydogbotapi
            return _pydogbotapi
        if fp is not None:
            try:
                _mod = imp.load_module('_pydogbotapi', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pydogbotapi = swig_import_helper()
    del swig_import_helper
else:
    import _pydogbotapi
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_pydogbotapi.SHARED_PTR_DISOWN_swigconstant(_pydogbotapi)
SHARED_PTR_DISOWN = _pydogbotapi.SHARED_PTR_DISOWN
class JointC(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, JointC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, JointC, name)
    __repr__ = _swig_repr

    def SetupTrajectory(self, updatePeriod, torqueLimit):
        return _pydogbotapi.JointC_SetupTrajectory(self, updatePeriod, torqueLimit)

    def DemandTrajectory(self, position, torque=0):
        return _pydogbotapi.JointC_DemandTrajectory(self, position, torque)

    def DemandPosition(self, position, torqueLimit):
        return _pydogbotapi.JointC_DemandPosition(self, position, torqueLimit)

    def GetState(self, theTime, position, velocity, torque):
        return _pydogbotapi.JointC_GetState(self, theTime, position, velocity, torque)

    def GetStateAt(self, theTime, position, velocity, torque):
        return _pydogbotapi.JointC_GetStateAt(self, theTime, position, velocity, torque)

    def TickDuration(self):
        return _pydogbotapi.JointC_TickDuration(self)

    def Position(self):
        return _pydogbotapi.JointC_Position(self)

    def Torque(self):
        return _pydogbotapi.JointC_Torque(self)

    def Velocity(self):
        return _pydogbotapi.JointC_Velocity(self)

    def __init__(self):
        this = _pydogbotapi.new_JointC()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pydogbotapi.delete_JointC
    __del__ = lambda self: None
JointC_swigregister = _pydogbotapi.JointC_swigregister
JointC_swigregister(JointC)

class DogBotAPIC(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DogBotAPIC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DogBotAPIC, name)
    __repr__ = _swig_repr

    def GetJointByName(self, name):
        return _pydogbotapi.DogBotAPIC_GetJointByName(self, name)

    def ListJoints(self):
        return _pydogbotapi.DogBotAPIC_ListJoints(self)
    __swig_getmethods__["TimeNow"] = lambda x: _pydogbotapi.DogBotAPIC_TimeNow
    if _newclass:
        TimeNow = staticmethod(_pydogbotapi.DogBotAPIC_TimeNow)
    __swig_getmethods__["LegNames"] = lambda x: _pydogbotapi.DogBotAPIC_LegNames
    if _newclass:
        LegNames = staticmethod(_pydogbotapi.DogBotAPIC_LegNames)
    __swig_getmethods__["LegJointNames"] = lambda x: _pydogbotapi.DogBotAPIC_LegJointNames
    if _newclass:
        LegJointNames = staticmethod(_pydogbotapi.DogBotAPIC_LegJointNames)

    def HomeAll(self):
        return _pydogbotapi.DogBotAPIC_HomeAll(self)

    def DemandHoldPosition(self):
        return _pydogbotapi.DogBotAPIC_DemandHoldPosition(self)

    def PowerOnAll(self):
        return _pydogbotapi.DogBotAPIC_PowerOnAll(self)

    def StandbyAll(self):
        return _pydogbotapi.DogBotAPIC_StandbyAll(self)

    def __init__(self):
        this = _pydogbotapi.new_DogBotAPIC()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pydogbotapi.delete_DogBotAPIC
    __del__ = lambda self: None
DogBotAPIC_swigregister = _pydogbotapi.DogBotAPIC_swigregister
DogBotAPIC_swigregister(DogBotAPIC)

def DogBotAPIC_TimeNow():
    return _pydogbotapi.DogBotAPIC_TimeNow()
DogBotAPIC_TimeNow = _pydogbotapi.DogBotAPIC_TimeNow

def DogBotAPIC_LegNames():
    return _pydogbotapi.DogBotAPIC_LegNames()
DogBotAPIC_LegNames = _pydogbotapi.DogBotAPIC_LegNames

def DogBotAPIC_LegJointNames():
    return _pydogbotapi.DogBotAPIC_LegJointNames()
DogBotAPIC_LegJointNames = _pydogbotapi.DogBotAPIC_LegJointNames


def OpenAPI(connection):
    return _pydogbotapi.OpenAPI(connection)
OpenAPI = _pydogbotapi.OpenAPI
class LegControllerC(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegControllerC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LegControllerC, name)
    __repr__ = _swig_repr

    def __init__(self, api, legName, useVirtualKnee):
        this = _pydogbotapi.new_LegControllerC(api, legName, useVirtualKnee)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def Goto(self, x, y, z, torqueLimit):
        return _pydogbotapi.LegControllerC_Goto(self, x, y, z, torqueLimit)

    def GotoJointAngles(self, roll, pitch, knee, torqueLimit):
        return _pydogbotapi.LegControllerC_GotoJointAngles(self, roll, pitch, knee, torqueLimit)

    def GetJointStates(self, theTime, angleRoll, anglePitch, angleknee, velocityRoll, velocityPitch, velocityKnee, torqueRoll, torquePitch, torqueknee):
        return _pydogbotapi.LegControllerC_GetJointStates(self, theTime, angleRoll, anglePitch, angleknee, velocityRoll, velocityPitch, velocityKnee, torqueRoll, torquePitch, torqueknee)

    def ComputeFootForce(self, atTime, positionX, positionY, positionZ, forceX, forceY, forceZ):
        return _pydogbotapi.LegControllerC_ComputeFootForce(self, atTime, positionX, positionY, positionZ, forceX, forceY, forceZ)
    __swig_destroy__ = _pydogbotapi.delete_LegControllerC
    __del__ = lambda self: None
LegControllerC_swigregister = _pydogbotapi.LegControllerC_swigregister
LegControllerC_swigregister(LegControllerC)

class PoseAnglesC(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PoseAnglesC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PoseAnglesC, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pydogbotapi.new_PoseAnglesC()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_getmethods__["JointId"] = lambda x: _pydogbotapi.PoseAnglesC_JointId
    if _newclass:
        JointId = staticmethod(_pydogbotapi.PoseAnglesC_JointId)
    __swig_getmethods__["JointName"] = lambda x: _pydogbotapi.PoseAnglesC_JointName
    if _newclass:
        JointName = staticmethod(_pydogbotapi.PoseAnglesC_JointName)

    def SetJoint(self, jnt, pos, torque=0):
        return _pydogbotapi.PoseAnglesC_SetJoint(self, jnt, pos, torque)

    def JointPosition(self, jnt):
        return _pydogbotapi.PoseAnglesC_JointPosition(self, jnt)

    def JointTorque(self, jnt):
        return _pydogbotapi.PoseAnglesC_JointTorque(self, jnt)
    __swig_destroy__ = _pydogbotapi.delete_PoseAnglesC
    __del__ = lambda self: None
PoseAnglesC_swigregister = _pydogbotapi.PoseAnglesC_swigregister
PoseAnglesC_swigregister(PoseAnglesC)

def PoseAnglesC_JointId(leg, legJnt):
    return _pydogbotapi.PoseAnglesC_JointId(leg, legJnt)
PoseAnglesC_JointId = _pydogbotapi.PoseAnglesC_JointId

def PoseAnglesC_JointName(leg, legJnt):
    return _pydogbotapi.PoseAnglesC_JointName(leg, legJnt)
PoseAnglesC_JointName = _pydogbotapi.PoseAnglesC_JointName

class SimpleQuadrupedPoseC(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimpleQuadrupedPoseC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimpleQuadrupedPoseC, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pydogbotapi.new_SimpleQuadrupedPoseC()
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def SetLegPosition(self, legId, x, y, z):
        return _pydogbotapi.SimpleQuadrupedPoseC_SetLegPosition(self, legId, x, y, z)

    def GetLegPosition(self, legId, x, y, z):
        return _pydogbotapi.SimpleQuadrupedPoseC_GetLegPosition(self, legId, x, y, z)
    __swig_destroy__ = _pydogbotapi.delete_SimpleQuadrupedPoseC
    __del__ = lambda self: None
SimpleQuadrupedPoseC_swigregister = _pydogbotapi.SimpleQuadrupedPoseC_swigregister
SimpleQuadrupedPoseC_swigregister(SimpleQuadrupedPoseC)

class DogBotControllerC(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DogBotControllerC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DogBotControllerC, name)
    __repr__ = _swig_repr

    def __init__(self, api):
        this = _pydogbotapi.new_DogBotControllerC(api)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def SetupTrajectory(self, updatePeriod, torqueLimit):
        return _pydogbotapi.DogBotControllerC_SetupTrajectory(self, updatePeriod, torqueLimit)

    def NextTrajectory(self, *args):
        return _pydogbotapi.DogBotControllerC_NextTrajectory(self, *args)
    __swig_destroy__ = _pydogbotapi.delete_DogBotControllerC
    __del__ = lambda self: None
DogBotControllerC_swigregister = _pydogbotapi.DogBotControllerC_swigregister
DogBotControllerC_swigregister(DogBotControllerC)

# This file is compatible with both classic and new-style classes.


